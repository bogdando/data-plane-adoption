# Whether to use no_log on tasks which may output potentially
# sensitive data.
use_no_log: false

# Whether the adopted node will host compute services
compute_adoption: true

# The names of cells on the target cloud
renamed_cells: "{{ [default_cell_name] + cells | difference('default') }}"

## Env headers (should be the same as provided in the docs, as the best effort)

# Header to apply in 'shell' module invocations. If overriding, at
# least 'set -e' should be kept to ensure that scripts that fail
# somewhere in the middle will also fail the whole Ansible run as
# expected.
shell_header: |
  set -euxo pipefail

# Snippet to get the desired 'oc' command onto $PATH.
oc_header: |
  eval $(crc oc-env)

# Header for a Compute cells names evaluation for the source and destination cloud
# and renaming of the default cell from tripleo
# NOTE: 'super' is not a cell, but a reference for the top-scope "upcall" API on main controllers
cells_env: |
  CELLS="{{ cells | join(' ') }}"
  DEFAULT_CELL_NAME={{ default_cell_name }}
  RENAMED_CELLS="{{ renamed_cells | join(' ') }}"

# Header for osdp nodesets names evaluation
nodesets_env: |
  {{ edpm_computes_shell_vars_src }}

  NODESETS=""
  for CELL in $(echo $RENAMED_CELLS); do
    ref="COMPUTES_$(echo ${CELL}|tr '[:lower:]' '[:upper:]')"
    eval names=\${!${ref}[@]}
    [ -z "$names" ] && continue
    NODESETS="'openstack-${CELL}', $NODESETS"
  done
  NODESETS="[${NODESETS%,*}{% if edpm_nodes_networker is defined %}, 'openstack-networker'{% endif %}]"

nodesets_env_oc: |
  {{ shell_header }}
  {{ oc_header }}
  {{ cells_env }}

  NODESETS=""
  for CELL in $(echo $RENAMED_CELLS); do
    oc get Openstackdataplanenodeset openstack-${CELL} || continue
    NODESETS="'openstack-${CELL}', $NODESETS"
  done
  NODESETS="[${NODESETS%,*}]"

# Header for custom nova osdp services names evaluation
nova_services_env: |
  {{ shell_header }}
  {{ cells_env }}

  NOVASERVICES=""
  for CELL in $(echo $RENAMED_CELLS); do
    NOVASERVICES="'nova-${CELL}', $NOVASERVICES"
  done
  NOVASERVICES="[${NOVASERVICES%,*}]"

# Headers for DB client CLI image
mariadb_image_env: |
  MARIADB_IMAGE=quay.io/podified-antelope-centos9/openstack-mariadb:current-podified

# Header for the source databases initial clusters members health check
mariadb_members_env: |-
  {{ shell_header }}
  {{ cells_env }}

  {% for cell in cells %}
  declare -A SOURCE_GALERA_MEMBERS_{{ cell.upper() }}
  SOURCE_GALERA_MEMBERS_{{ cell.upper() }}=(
    {% for n in source_galera_members[cell] | default([]) %}
    ["{{ n.name }}"]={{ n.ip }}
    {% endfor %}
  )
  {% endfor %}

# Headers for the destination databases access passwords
mariadb_passwords_env: |-
  {{ shell_header }}
  {{ cells_env }}

  declare -A PODIFIED_DB_ROOT_PASSWORD
  for CELL in $(echo "super $RENAMED_CELLS"); do
    PODIFIED_DB_ROOT_PASSWORD[$CELL]=$(oc get -o json secret/osp-secret | jq -r .data.DbRootPassword | base64 -d)
  done

# Header for the source database access
mariadb_copy_shell_vars_src: |-
  {{ shell_header }}
  {{ mariadb_image_env }}
  {{ cells_env }}
  MARIADB_CLIENT_ANNOTATIONS='--annotations=k8s.v1.cni.cncf.io/networks=internalapi'
  STORAGE_CLASS={{ storage_class_name }}

  declare -A TRIPLEO_PASSWORDS
  for CELL in $(echo $CELLS); do
    if [ "$CELL" = "default" ]; then
      TRIPLEO_PASSWORDS[default]="$HOME/overcloud-passwords.yaml"
    else
      # in a split-stack source cloud, it should take a stack-specific passwords file instead
      TRIPLEO_PASSWORDS[$CELL]="$HOME/overcloud-passwords.yaml"
    fi
  done

  declare -A SOURCE_DB_ROOT_PASSWORD
  for CELL in $(echo $CELLS); do
    SOURCE_DB_ROOT_PASSWORD[$CELL]=$(cat ${TRIPLEO_PASSWORDS[$CELL]} | grep ' MysqlRootPassword:' | awk -F ': ' '{ print $2; }')
  done

  declare -A SOURCE_MARIADB_IP
  {% for cell in cells %}
  SOURCE_MARIADB_IP[{{ cell }}]={{ source_mariadb_ip[cell] }}
  {% endfor %}

# Header for the destination database access
mariadb_copy_shell_vars_dst: |
  {{ shell_header }}
  {{ oc_header }}
  {{ mariadb_image_env }}
  {{ cells_env }}

  # The CHARACTER_SET and collation should match the source DB
  # if the do not then it will break foreign key relationships
  # for any tables that are created in the future as part of db sync
  CHARACTER_SET=utf8
  COLLATION=utf8_general_ci

  {{ mariadb_passwords_env }}

  declare -A PODIFIED_MARIADB_IP
  for CELL in $(echo "super $RENAMED_CELLS"); do
    if [ "$CELL" = "super" ]; then
      PODIFIED_MARIADB_IP[$CELL]=$(oc get svc --selector "mariadb/name=openstack" -ojsonpath='{.items[0].spec.clusterIP}')
    else
      PODIFIED_MARIADB_IP[$CELL]=$(oc get svc --selector "mariadb/name=openstack-$CELL" -ojsonpath='{.items[0].spec.clusterIP}')
    fi
  done

# Header for the destination cloud EDPM Nova cell computes FDQN and IP pairs, per a cell
edpm_computes_shell_vars_src: |-
  {{ shell_header }}
  {{ cells_env }}

  {% for cell in renamed_cells %}
  declare -A COMPUTES_{{ cell.upper() }}
  COMPUTES_{{ cell.upper() }}=(
    {%- for v in edpm_nodes[cell] | default({}) %}
    ["{{ edpm_nodes[cell][v].hostName }}"]={{ edpm_nodes[cell][v].ansible.ansibleHost }}
    {% endfor -%}
  )
  {% endfor %}

pull_openstack_configuration_ssh_shell_vars: |
  CONTROLLER1_SSH="{{ controller1_ssh }}"
  CONTROLLER2_SSH="{{ controller2_ssh }}"
  CONTROLLER3_SSH="{{ controller3_ssh }}"

# Whether to adopt Octavia
enable_octavia: true
octavia_adoption: true
